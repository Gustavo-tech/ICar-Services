// <auto-generated />
using System;
using ICar.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ICar.Infrastructure.Migrations
{
    [DbContext(typeof(ICarContext))]
    [Migration("20220103180101_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ICar.Infrastructure.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("District")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<string>("Street")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("VARCHAR(8)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<bool>("AcceptsChange")
                        .HasColumnType("bit");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("ExchangeType")
                        .HasColumnType("int");

                    b.Property<string>("GasolineType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("IpvaIsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArmored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLicensed")
                        .HasColumnType("bit");

                    b.Property<int>("KilometersTraveled")
                        .HasColumnType("int");

                    b.Property<int>("MakeDate")
                        .HasColumnType("INT");

                    b.Property<int>("MakedDate")
                        .HasColumnType("INT");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("INT");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("Plate")
                        .HasColumnType("CHAR(8)");

                    b.Property<int>("Price")
                        .HasMaxLength(10000000)
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.CarPicture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarPicture");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Contact", b =>
                {
                    b.Property<string>("UserObjectId")
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserObjectId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Interaction", b =>
                {
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<string>("WithUserId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FromUser")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ToUser")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.News", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Car", b =>
                {
                    b.HasOne("ICar.Infrastructure.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.CarPicture", b =>
                {
                    b.HasOne("ICar.Infrastructure.Models.Car", null)
                        .WithMany("Pictures")
                        .HasForeignKey("CarId");
                });

            modelBuilder.Entity("ICar.Infrastructure.Models.Car", b =>
                {
                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
